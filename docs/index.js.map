{"version":3,"file":"index.js","sources":["../node_modules/lit-html/lib/dom.js","../node_modules/lit-html/lib/template.js","../node_modules/lit-html/lib/modify-template.js","../node_modules/lit-html/lib/directive.js","../node_modules/lit-html/lib/part.js","../node_modules/lit-html/lib/template-instance.js","../node_modules/lit-html/lib/template-result.js","../node_modules/lit-html/lib/parts.js","../node_modules/lit-html/lib/template-factory.js","../node_modules/lit-html/lib/render.js","../node_modules/lit-html/lib/default-template-processor.js","../node_modules/lit-html/lit-html.js","../node_modules/lit-html/lib/shady-render.js","../node_modules/lit-element/lib/updating-element.js","../node_modules/lit-element/lib/css-tag.js","../node_modules/lit-element/lit-element.js","../src/fusion.js","../src/audio-server.js","../src/drum-pad.js","../src/main-app.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = typeof window !== 'undefined' &&\n    window.customElements != null &&\n    window.customElements.polyfillWrapFlushCallback !==\n        undefined;\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.insertBefore(start, before);\n        start = n;\n    }\n};\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes = (container, start, end = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.removeChild(start);\n        start = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n/**\n * An updatable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        const nodesToRemove = [];\n        const stack = [];\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(element.content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        // Keeps track of the last index associated with a part. We try to delete\n        // unnecessary nodes, but we never want to associate two different parts\n        // to the same index. They must have a constant node between.\n        let lastPartIndex = 0;\n        let index = -1;\n        let partIndex = 0;\n        const { strings, values: { length } } = result;\n        while (partIndex < length) {\n            const node = walker.nextNode();\n            if (node === null) {\n                // We've exhausted the content inside a nested template element.\n                // Because we still have parts (the outer for-loop), we know:\n                // - There is a template in the stack\n                // - The walker will find a nextNode outside the template\n                walker.currentNode = stack.pop();\n                continue;\n            }\n            index++;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (node.hasAttributes()) {\n                    const attributes = node.attributes;\n                    const { length } = attributes;\n                    // Per\n                    // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                    // attributes are not guaranteed to be returned in document order.\n                    // In particular, Edge/IE can return them out of order, so we cannot\n                    // assume a correspondence between part index and attribute index.\n                    let count = 0;\n                    for (let i = 0; i < length; i++) {\n                        if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n                            count++;\n                        }\n                    }\n                    while (count-- > 0) {\n                        // Get the template literal section leading up to the first\n                        // expression in this attribute\n                        const stringForPart = strings[partIndex];\n                        // Find the attribute name\n                        const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                        // Find the corresponding attribute\n                        // All bound attributes have had a suffix added in\n                        // TemplateResult#getHTML to opt out of special attribute\n                        // handling. To look up the attribute value we also need to add\n                        // the suffix.\n                        const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n                        const attributeValue = node.getAttribute(attributeLookupName);\n                        node.removeAttribute(attributeLookupName);\n                        const statics = attributeValue.split(markerRegex);\n                        this.parts.push({ type: 'attribute', index, name, strings: statics });\n                        partIndex += statics.length - 1;\n                    }\n                }\n                if (node.tagName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const data = node.data;\n                if (data.indexOf(marker) >= 0) {\n                    const parent = node.parentNode;\n                    const strings = data.split(markerRegex);\n                    const lastIndex = strings.length - 1;\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        let insert;\n                        let s = strings[i];\n                        if (s === '') {\n                            insert = createMarker();\n                        }\n                        else {\n                            const match = lastAttributeNameRegex.exec(s);\n                            if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                                s = s.slice(0, match.index) + match[1] +\n                                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n                            }\n                            insert = document.createTextNode(s);\n                        }\n                        parent.insertBefore(insert, node);\n                        this.parts.push({ type: 'node', index: ++index });\n                    }\n                    // If there's no text, we must insert a comment to mark our place.\n                    // Else, we can trust it will stick around after cloning.\n                    if (strings[lastIndex] === '') {\n                        parent.insertBefore(createMarker(), node);\n                        nodesToRemove.push(node);\n                    }\n                    else {\n                        node.data = strings[lastIndex];\n                    }\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                }\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                if (node.data === marker) {\n                    const parent = node.parentNode;\n                    // Add a new marker node to be the startNode of the Part if any of\n                    // the following are true:\n                    //  * We don't have a previousSibling\n                    //  * The previousSibling is already the start of a previous part\n                    if (node.previousSibling === null || index === lastPartIndex) {\n                        index++;\n                        parent.insertBefore(createMarker(), node);\n                    }\n                    lastPartIndex = index;\n                    this.parts.push({ type: 'node', index });\n                    // If we don't have a nextSibling, keep this node so we have an end.\n                    // Else, we can remove it to save future costs.\n                    if (node.nextSibling === null) {\n                        node.data = '';\n                    }\n                    else {\n                        nodesToRemove.push(node);\n                        index--;\n                    }\n                    partIndex++;\n                }\n                else {\n                    let i = -1;\n                    while ((i = node.data.indexOf(marker, i + 1)) !== -1) {\n                        // Comment node has a binding marker inside, make an inactive part\n                        // The binding won't work, but subsequent bindings will\n                        // TODO (justinfagnani): consider whether it's even worth it to\n                        // make bindings in comments work\n                        this.parts.push({ type: 'node', index: -1 });\n                        partIndex++;\n                    }\n                }\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nconst endsWith = (str, suffix) => {\n    const index = str.length - suffix.length;\n    return index >= 0 && str.slice(index) === suffix;\n};\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = \n// eslint-disable-next-line no-control-regex\n/([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module shady-render\n */\nimport { isTemplatePartActive } from './template.js';\nconst walkerNodeFilter = 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */;\n/**\n * Removes the list of nodes from a Template safely. In addition to removing\n * nodes from the Template, the Template part indices are updated to match\n * the mutated Template DOM.\n *\n * As the template is walked the removal state is tracked and\n * part indices are adjusted as needed.\n *\n * div\n *   div#1 (remove) <-- start removing (removing node is div#1)\n *     div\n *       div#2 (remove)  <-- continue removing (removing node is still div#1)\n *         div\n * div <-- stop removing since previous sibling is the removing node (div#1,\n * removed 4 nodes)\n */\nexport function removeNodesFromTemplate(template, nodesToRemove) {\n    const { element: { content }, parts } = template;\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let part = parts[partIndex];\n    let nodeIndex = -1;\n    let removeCount = 0;\n    const nodesToRemoveInTemplate = [];\n    let currentRemovingNode = null;\n    while (walker.nextNode()) {\n        nodeIndex++;\n        const node = walker.currentNode;\n        // End removal if stepped past the removing node\n        if (node.previousSibling === currentRemovingNode) {\n            currentRemovingNode = null;\n        }\n        // A node to remove was found in the template\n        if (nodesToRemove.has(node)) {\n            nodesToRemoveInTemplate.push(node);\n            // Track node we're removing\n            if (currentRemovingNode === null) {\n                currentRemovingNode = node;\n            }\n        }\n        // When removing, increment count by which to adjust subsequent part indices\n        if (currentRemovingNode !== null) {\n            removeCount++;\n        }\n        while (part !== undefined && part.index === nodeIndex) {\n            // If part is in a removed node deactivate it by setting index to -1 or\n            // adjust the index as needed.\n            part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;\n            // go to the next active part.\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n            part = parts[partIndex];\n        }\n    }\n    nodesToRemoveInTemplate.forEach((n) => n.parentNode.removeChild(n));\n}\nconst countNodes = (node) => {\n    let count = (node.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */) ? 0 : 1;\n    const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);\n    while (walker.nextNode()) {\n        count++;\n    }\n    return count;\n};\nconst nextActiveIndexInTemplateParts = (parts, startIndex = -1) => {\n    for (let i = startIndex + 1; i < parts.length; i++) {\n        const part = parts[i];\n        if (isTemplatePartActive(part)) {\n            return i;\n        }\n    }\n    return -1;\n};\n/**\n * Inserts the given node into the Template, optionally before the given\n * refNode. In addition to inserting the node into the Template, the Template\n * part indices are updated to match the mutated Template DOM.\n */\nexport function insertNodeIntoTemplate(template, node, refNode = null) {\n    const { element: { content }, parts } = template;\n    // If there's no refNode, then put node at end of template.\n    // No part indices need to be shifted in this case.\n    if (refNode === null || refNode === undefined) {\n        content.appendChild(node);\n        return;\n    }\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let insertCount = 0;\n    let walkerIndex = -1;\n    while (walker.nextNode()) {\n        walkerIndex++;\n        const walkerNode = walker.currentNode;\n        if (walkerNode === refNode) {\n            insertCount = countNodes(node);\n            refNode.parentNode.insertBefore(node, refNode);\n        }\n        while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {\n            // If we've inserted the node, simply adjust all subsequent parts\n            if (insertCount > 0) {\n                while (partIndex !== -1) {\n                    parts[partIndex].index += insertCount;\n                    partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n                }\n                return;\n            }\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n        }\n    }\n}\n//# sourceMappingURL=modify-template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = (f) => ((...args) => {\n    const d = f(...args);\n    directives.set(d, true);\n    return d;\n});\nexport const isDirective = (o) => {\n    return typeof o === 'function' && directives.has(o);\n};\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this.__parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // There are a number of steps in the lifecycle of a template instance's\n        // DOM fragment:\n        //  1. Clone - create the instance fragment\n        //  2. Adopt - adopt into the main document\n        //  3. Process - find part markers and create parts\n        //  4. Upgrade - upgrade custom elements\n        //  5. Update - set node, attribute, property, etc., values\n        //  6. Connect - connect to the document. Optional and outside of this\n        //     method.\n        //\n        // We have a few constraints on the ordering of these steps:\n        //  * We need to upgrade before updating, so that property values will pass\n        //    through any property setters.\n        //  * We would like to process before upgrading so that we're sure that the\n        //    cloned fragment is inert and not disturbed by self-modifying DOM.\n        //  * We want custom elements to upgrade even in disconnected fragments.\n        //\n        // Given these constraints, with full custom elements support we would\n        // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n        //\n        // But Safari does not implement CustomElementRegistry#upgrade, so we\n        // can not implement that order and still have upgrade-before-update and\n        // upgrade disconnected fragments. So we instead sacrifice the\n        // process-before-upgrade constraint, since in Custom Elements v1 elements\n        // must not modify their light DOM in the constructor. We still have issues\n        // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n        // that don't strictly adhere to the no-modification rule because shadow\n        // DOM, which may be created in the constructor, is emulated by being placed\n        // in the light DOM.\n        //\n        // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n        // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n        // in one step.\n        //\n        // The Custom Elements v1 polyfill supports upgrade(), so the order when\n        // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n        // Connect.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const stack = [];\n        const parts = this.template.parts;\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        let partIndex = 0;\n        let nodeIndex = 0;\n        let part;\n        let node = walker.nextNode();\n        // Loop through all the nodes and parts of a template\n        while (partIndex < parts.length) {\n            part = parts[partIndex];\n            if (!isTemplatePartActive(part)) {\n                this.__parts.push(undefined);\n                partIndex++;\n                continue;\n            }\n            // Progress the tree walker until we find our next part's node.\n            // Note that multiple parts may share the same node (attribute parts\n            // on a single element), so this loop may not run at all.\n            while (nodeIndex < part.index) {\n                nodeIndex++;\n                if (node.nodeName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n                if ((node = walker.nextNode()) === null) {\n                    // We've exhausted the content inside a nested template element.\n                    // Because we still have parts (the outer for-loop), we know:\n                    // - There is a template in the stack\n                    // - The walker will find a nextNode outside the template\n                    walker.currentNode = stack.pop();\n                    node = walker.nextNode();\n                }\n            }\n            // We've arrived at our part's node.\n            if (part.type === 'node') {\n                const part = this.processor.handleTextExpression(this.options);\n                part.insertAfterNode(node.previousSibling);\n                this.__parts.push(part);\n            }\n            else {\n                this.__parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n            }\n            partIndex++;\n        }\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { reparentNodes } from './dom.js';\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from './template.js';\nconst commentMarker = ` ${marker} `;\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isCommentBinding = false;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            // For each binding we want to determine the kind of marker to insert\n            // into the template source before it's parsed by the browser's HTML\n            // parser. The marker type is based on whether the expression is in an\n            // attribute, text, or comment position.\n            //   * For node-position bindings we insert a comment with the marker\n            //     sentinel as its text content, like <!--{{lit-guid}}-->.\n            //   * For attribute bindings we insert just the marker sentinel for the\n            //     first binding, so that we support unquoted attribute bindings.\n            //     Subsequent bindings can use a comment marker because multi-binding\n            //     attributes must be quoted.\n            //   * For comment bindings we insert just the marker sentinel so we don't\n            //     close the comment.\n            //\n            // The following code scans the template source, but is *not* an HTML\n            // parser. We don't need to track the tree structure of the HTML, only\n            // whether a binding is inside a comment, and if not, if it appears to be\n            // the first binding in an attribute.\n            const commentOpen = s.lastIndexOf('<!--');\n            // We're in comment position if we have a comment open with no following\n            // comment close. Because <-- can appear in an attribute value there can\n            // be false positives.\n            isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n                s.indexOf('-->', commentOpen + 1) === -1;\n            // Check to see if we have an attribute-like sequence preceding the\n            // expression. This can match \"name=value\" like structures in text,\n            // comments, and attribute values, so there can be false-positives.\n            const attributeMatch = lastAttributeNameRegex.exec(s);\n            if (attributeMatch === null) {\n                // We're only in this branch if we don't have a attribute-like\n                // preceding sequence. For comments, this guards against unusual\n                // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n                // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n                // below.\n                html += s + (isCommentBinding ? commentMarker : nodeMarker);\n            }\n            else {\n                // For attributes we use just a marker sentinel, and also append a\n                // $lit$ suffix to the name to opt-out of attribute-specific parsing\n                // that IE and Edge do for style and certain SVG attributes.\n                html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n                    attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n                    marker;\n            }\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange, nothing } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => {\n    return (value === null ||\n        !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value) => {\n    return Array.isArray(value) ||\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        !!(value && value[Symbol.iterator]);\n};\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attribute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = this.parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (isPrimitive(v) || !isIterable(v)) {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n                else {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart {\n    constructor(committer) {\n        this.value = undefined;\n        this.committer = committer;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Appends this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n     * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n     * such as those that appear in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part.__insert(this.startNode = createMarker());\n        part.__insert(this.endNode = createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref.__insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        if (this.startNode.parentNode === null) {\n            return;\n        }\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        const value = this.__pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this.__commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this.__commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this.__commitNode(value);\n        }\n        else if (isIterable(value)) {\n            this.__commitIterable(value);\n        }\n        else if (value === nothing) {\n            this.value = nothing;\n            this.clear();\n        }\n        else {\n            // Fallback, will render the string representation\n            this.__commitText(value);\n        }\n    }\n    __insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    __commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this.__insert(value);\n        this.value = value;\n    }\n    __commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        // If `value` isn't already a string, we explicitly convert it here in case\n        // it can't be implicitly converted - i.e. it's a symbol.\n        const valueAsString = typeof value === 'string' ? value : String(value);\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === 3 /* Node.TEXT_NODE */) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.data = valueAsString;\n        }\n        else {\n            this.__commitNode(document.createTextNode(valueAsString));\n        }\n        this.value = value;\n    }\n    __commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value instanceof TemplateInstance &&\n            this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this.__commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    __commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const value = !!this.__pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n            this.value = value;\n        }\n        this.__pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the third\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\n// Wrap into an IIFE because MS Edge <= v41 does not support having try/catch\n// blocks right into the body of a module\n(() => {\n    try {\n        const options = {\n            get capture() {\n                eventOptionsSupported = true;\n                return false;\n            }\n        };\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        window.addEventListener('test', options, options);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        window.removeEventListener('test', options, options);\n    }\n    catch (_e) {\n        // event options not supported\n    }\n})();\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this.__boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const newListener = this.__pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        if (shouldAddListener) {\n            this.__options = getOptions(newListener);\n            this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        this.value = newListener;\n        this.__pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const committer = new PropertyCommitter(element, name.slice(1), strings);\n            return committer.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const committer = new AttributeCommitter(element, name, strings);\n        return committer.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from './lib/default-template-processor.js';\nexport { directive, isDirective } from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from './lib/dom.js';\nexport { noChange, nothing } from './lib/part.js';\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart } from './lib/parts.js';\nexport { parts, render } from './lib/render.js';\nexport { templateCaches, templateFactory } from './lib/template-factory.js';\nexport { TemplateInstance } from './lib/template-instance.js';\nexport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { createMarker, isTemplatePartActive, Template } from './lib/template.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\nif (typeof window !== 'undefined') {\n    (window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.2.1');\n}\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * Module to add shady DOM/shady CSS polyfill support to lit-html template\n * rendering. See the [[render]] method for details.\n *\n * @module shady-render\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { removeNodes } from './dom.js';\nimport { insertNodeIntoTemplate, removeNodesFromTemplate } from './modify-template.js';\nimport { parts, render as litRender } from './render.js';\nimport { templateCaches } from './template-factory.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { marker, Template } from './template.js';\nexport { html, svg, TemplateResult } from '../lit-html.js';\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type, scopeName) => `${type}--${scopeName}`;\nlet compatibleShadyCSSVersion = true;\nif (typeof window.ShadyCSS === 'undefined') {\n    compatibleShadyCSSVersion = false;\n}\nelse if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {\n    console.warn(`Incompatible ShadyCSS version detected. ` +\n        `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and ` +\n        `@webcomponents/shadycss@1.3.1.`);\n    compatibleShadyCSSVersion = false;\n}\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nconst shadyTemplateFactory = (scopeName) => (result) => {\n    const cacheKey = getTemplateCacheKey(result.type, scopeName);\n    let templateCache = templateCaches.get(cacheKey);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(cacheKey, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    const key = result.strings.join(marker);\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (compatibleShadyCSSVersion) {\n            window.ShadyCSS.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.keyString.set(key, template);\n    }\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n};\nconst TEMPLATE_TYPES = ['html', 'svg'];\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nconst removeStylesFromLitTemplates = (scopeName) => {\n    TEMPLATE_TYPES.forEach((type) => {\n        const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n        if (templates !== undefined) {\n            templates.keyString.forEach((template) => {\n                const { element: { content } } = template;\n                // IE 11 doesn't support the iterable param Set constructor\n                const styles = new Set();\n                Array.from(content.querySelectorAll('style')).forEach((s) => {\n                    styles.add(s);\n                });\n                removeNodesFromTemplate(template, styles);\n            });\n        }\n    });\n};\nconst shadyRenderSet = new Set();\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\nconst prepareTemplateStyles = (scopeName, renderedDOM, template) => {\n    shadyRenderSet.add(scopeName);\n    // If `renderedDOM` is stamped from a Template, then we need to edit that\n    // Template's underlying template element. Otherwise, we create one here\n    // to give to ShadyCSS, which still requires one while scoping.\n    const templateElement = !!template ? template.element : document.createElement('template');\n    // Move styles out of rendered DOM and store.\n    const styles = renderedDOM.querySelectorAll('style');\n    const { length } = styles;\n    // If there are no styles, skip unnecessary work\n    if (length === 0) {\n        // Ensure prepareTemplateStyles is called to support adding\n        // styles via `prepareAdoptedCssText` since that requires that\n        // `prepareTemplateStyles` is called.\n        //\n        // ShadyCSS will only update styles containing @apply in the template\n        // given to `prepareTemplateStyles`. If no lit Template was given,\n        // ShadyCSS will not be able to update uses of @apply in any relevant\n        // template. However, this is not a problem because we only create the\n        // template for the purpose of supporting `prepareAdoptedCssText`,\n        // which doesn't support @apply at all.\n        window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);\n        return;\n    }\n    const condensedStyle = document.createElement('style');\n    // Collect styles into a single style. This helps us make sure ShadyCSS\n    // manipulations will not prevent us from being able to fix up template\n    // part indices.\n    // NOTE: collecting styles is inefficient for browsers but ShadyCSS\n    // currently does this anyway. When it does not, this should be changed.\n    for (let i = 0; i < length; i++) {\n        const style = styles[i];\n        style.parentNode.removeChild(style);\n        condensedStyle.textContent += style.textContent;\n    }\n    // Remove styles from nested templates in this scope.\n    removeStylesFromLitTemplates(scopeName);\n    // And then put the condensed style into the \"root\" template passed in as\n    // `template`.\n    const content = templateElement.content;\n    if (!!template) {\n        insertNodeIntoTemplate(template, condensedStyle, content.firstChild);\n    }\n    else {\n        content.insertBefore(condensedStyle, content.firstChild);\n    }\n    // Note, it's important that ShadyCSS gets the template that `lit-html`\n    // will actually render so that it can update the style inside when\n    // needed (e.g. @apply native Shadow DOM case).\n    window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);\n    const style = content.querySelector('style');\n    if (window.ShadyCSS.nativeShadow && style !== null) {\n        // When in native Shadow DOM, ensure the style created by ShadyCSS is\n        // included in initially rendered output (`renderedDOM`).\n        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);\n    }\n    else if (!!template) {\n        // When no style is left in the template, parts will be broken as a\n        // result. To fix this, we put back the style node ShadyCSS removed\n        // and then tell lit to remove that node from the template.\n        // There can be no style in the template in 2 cases (1) when Shady DOM\n        // is in use, ShadyCSS removes all styles, (2) when native Shadow DOM\n        // is in use ShadyCSS removes the style if it contains no content.\n        // NOTE, ShadyCSS creates its own style so we can safely add/remove\n        // `condensedStyle` here.\n        content.insertBefore(condensedStyle, content.firstChild);\n        const removes = new Set();\n        removes.add(condensedStyle);\n        removeNodesFromTemplate(template, removes);\n    }\n};\n/**\n * Extension to the standard `render` method which supports rendering\n * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)\n * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used\n * or when the webcomponentsjs\n * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.\n *\n * Adds a `scopeName` option which is used to scope element DOM and stylesheets\n * when native ShadowDOM is unavailable. The `scopeName` will be added to\n * the class attribute of all rendered DOM. In addition, any style elements will\n * be automatically re-written with this `scopeName` selector and moved out\n * of the rendered DOM and into the document `<head>`.\n *\n * It is common to use this render method in conjunction with a custom element\n * which renders a shadowRoot. When this is done, typically the element's\n * `localName` should be used as the `scopeName`.\n *\n * In addition to DOM scoping, ShadyCSS also supports a basic shim for css\n * custom properties (needed only on older browsers like IE11) and a shim for\n * a deprecated feature called `@apply` that supports applying a set of css\n * custom properties to a given location.\n *\n * Usage considerations:\n *\n * * Part values in `<style>` elements are only applied the first time a given\n * `scopeName` renders. Subsequent changes to parts in style elements will have\n * no effect. Because of this, parts in style elements should only be used for\n * values that will never change, for example parts that set scope-wide theme\n * values or parts which render shared style elements.\n *\n * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a\n * custom element's `constructor` is not supported. Instead rendering should\n * either done asynchronously, for example at microtask timing (for example\n * `Promise.resolve()`), or be deferred until the first time the element's\n * `connectedCallback` runs.\n *\n * Usage considerations when using shimmed custom properties or `@apply`:\n *\n * * Whenever any dynamic changes are made which affect\n * css custom properties, `ShadyCSS.styleElement(element)` must be called\n * to update the element. There are two cases when this is needed:\n * (1) the element is connected to a new parent, (2) a class is added to the\n * element that causes it to match different custom properties.\n * To address the first case when rendering a custom element, `styleElement`\n * should be called in the element's `connectedCallback`.\n *\n * * Shimmed custom properties may only be defined either for an entire\n * shadowRoot (for example, in a `:host` rule) or via a rule that directly\n * matches an element with a shadowRoot. In other words, instead of flowing from\n * parent to child as do native css custom properties, shimmed custom properties\n * flow only from shadowRoots to nested shadowRoots.\n *\n * * When using `@apply` mixing css shorthand property names with\n * non-shorthand names (for example `border` and `border-width`) is not\n * supported.\n */\nexport const render = (result, container, options) => {\n    if (!options || typeof options !== 'object' || !options.scopeName) {\n        throw new Error('The `scopeName` option is required.');\n    }\n    const scopeName = options.scopeName;\n    const hasRendered = parts.has(container);\n    const needsScoping = compatibleShadyCSSVersion &&\n        container.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */ &&\n        !!container.host;\n    // Handle first render to a scope specially...\n    const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);\n    // On first scope render, render into a fragment; this cannot be a single\n    // fragment that is reused since nested renders can occur synchronously.\n    const renderContainer = firstScopeRender ? document.createDocumentFragment() : container;\n    litRender(result, renderContainer, Object.assign({ templateFactory: shadyTemplateFactory(scopeName) }, options));\n    // When performing first scope render,\n    // (1) We've rendered into a fragment so that there's a chance to\n    // `prepareTemplateStyles` before sub-elements hit the DOM\n    // (which might cause them to render based on a common pattern of\n    // rendering in a custom element's `connectedCallback`);\n    // (2) Scope the template with ShadyCSS one time only for this scope.\n    // (3) Render the fragment into the container and make sure the\n    // container knows its `part` is the one we just rendered. This ensures\n    // DOM will be re-used on subsequent renders.\n    if (firstScopeRender) {\n        const part = parts.get(renderContainer);\n        parts.delete(renderContainer);\n        // ShadyCSS might have style sheets (e.g. from `prepareAdoptedCssText`)\n        // that should apply to `renderContainer` even if the rendered value is\n        // not a TemplateInstance. However, it will only insert scoped styles\n        // into the document if `prepareTemplateStyles` has already been called\n        // for the given scope name.\n        const template = part.value instanceof TemplateInstance ?\n            part.value.template :\n            undefined;\n        prepareTemplateStyles(scopeName, renderContainer, template);\n        removeNodes(container, container.firstChild);\n        container.appendChild(renderContainer);\n        parts.set(container, part);\n    }\n    // After elements have hit the DOM, update styling if this is the\n    // initial render to this container.\n    // This is needed whenever dynamic changes are made so it would be\n    // safest to do every render; however, this would regress performance\n    // so we leave it up to the user to call `ShadyCSS.styleElement`\n    // for dynamic changes.\n    if (!hasRendered && needsScoping) {\n        window.ShadyCSS.styleElement(container.host);\n    }\n};\n//# sourceMappingURL=shady-render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nvar _a;\n/**\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\nwindow.JSCompiler_renameProperty =\n    (prop, _obj) => prop;\nexport const defaultConverter = {\n    toAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value ? '' : null;\n            case Object:\n            case Array:\n                // if the value is `null` or `undefined` pass this through\n                // to allow removing/no change behavior.\n                return value == null ? value : JSON.stringify(value);\n        }\n        return value;\n    },\n    fromAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value !== null;\n            case Number:\n                return value === null ? null : Number(value);\n            case Object:\n            case Array:\n                return JSON.parse(value);\n        }\n        return value;\n    }\n};\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual = (value, old) => {\n    // This ensures (old==NaN, value==NaN) always returns false\n    return old !== value && (old === old || value === value);\n};\nconst defaultPropertyDeclaration = {\n    attribute: true,\n    type: String,\n    converter: defaultConverter,\n    reflect: false,\n    hasChanged: notEqual\n};\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;\nconst STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;\n/**\n * The Closure JS Compiler doesn't currently have good support for static\n * property semantics where \"this\" is dynamic (e.g.\n * https://github.com/google/closure-compiler/issues/3177 and others) so we use\n * this hack to bypass any rewriting by the compiler.\n */\nconst finalized = 'finalized';\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n */\nexport class UpdatingElement extends HTMLElement {\n    constructor() {\n        super();\n        this._updateState = 0;\n        this._instanceProperties = undefined;\n        // Initialize to an unresolved Promise so we can make sure the element has\n        // connected before first update.\n        this._updatePromise = new Promise((res) => this._enableUpdatingResolver = res);\n        /**\n         * Map with keys for any properties that have changed since the last\n         * update cycle with previous values.\n         */\n        this._changedProperties = new Map();\n        /**\n         * Map with keys of properties that should be reflected when updated.\n         */\n        this._reflectingProperties = undefined;\n        this.initialize();\n    }\n    /**\n     * Returns a list of attributes corresponding to the registered properties.\n     * @nocollapse\n     */\n    static get observedAttributes() {\n        // note: piggy backing on this to ensure we're finalized.\n        this.finalize();\n        const attributes = [];\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this._classProperties.forEach((v, p) => {\n            const attr = this._attributeNameForProperty(p, v);\n            if (attr !== undefined) {\n                this._attributeToPropertyMap.set(attr, p);\n                attributes.push(attr);\n            }\n        });\n        return attributes;\n    }\n    /**\n     * Ensures the private `_classProperties` property metadata is created.\n     * In addition to `finalize` this is also called in `createProperty` to\n     * ensure the `@property` decorator can add property metadata.\n     */\n    /** @nocollapse */\n    static _ensureClassProperties() {\n        // ensure private storage for property declarations.\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('_classProperties', this))) {\n            this._classProperties = new Map();\n            // NOTE: Workaround IE11 not supporting Map constructor argument.\n            const superProperties = Object.getPrototypeOf(this)._classProperties;\n            if (superProperties !== undefined) {\n                superProperties.forEach((v, k) => this._classProperties.set(k, v));\n            }\n        }\n    }\n    /**\n     * Creates a property accessor on the element prototype if one does not exist\n     * and stores a PropertyDeclaration for the property with the given options.\n     * The property setter calls the property's `hasChanged` property option\n     * or uses a strict identity check to determine whether or not to request\n     * an update.\n     *\n     * This method may be overridden to customize properties; however,\n     * when doing so, it's important to call `super.createProperty` to ensure\n     * the property is setup correctly. This method calls\n     * `getPropertyDescriptor` internally to get a descriptor to install.\n     * To customize what properties do when they are get or set, override\n     * `getPropertyDescriptor`. To customize the options for a property,\n     * implement `createProperty` like this:\n     *\n     * static createProperty(name, options) {\n     *   options = Object.assign(options, {myOption: true});\n     *   super.createProperty(name, options);\n     * }\n     *\n     * @nocollapse\n     */\n    static createProperty(name, options = defaultPropertyDeclaration) {\n        // Note, since this can be called by the `@property` decorator which\n        // is called before `finalize`, we ensure storage exists for property\n        // metadata.\n        this._ensureClassProperties();\n        this._classProperties.set(name, options);\n        // Do not generate an accessor if the prototype already has one, since\n        // it would be lost otherwise and that would never be the user's intention;\n        // Instead, we expect users to call `requestUpdate` themselves from\n        // user-defined accessors. Note that if the super has an accessor we will\n        // still overwrite it\n        if (options.noAccessor || this.prototype.hasOwnProperty(name)) {\n            return;\n        }\n        const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n        const descriptor = this.getPropertyDescriptor(name, key, options);\n        if (descriptor !== undefined) {\n            Object.defineProperty(this.prototype, name, descriptor);\n        }\n    }\n    /**\n     * Returns a property descriptor to be defined on the given named property.\n     * If no descriptor is returned, the property will not become an accessor.\n     * For example,\n     *\n     *   class MyElement extends LitElement {\n     *     static getPropertyDescriptor(name, key, options) {\n     *       const defaultDescriptor =\n     *           super.getPropertyDescriptor(name, key, options);\n     *       const setter = defaultDescriptor.set;\n     *       return {\n     *         get: defaultDescriptor.get,\n     *         set(value) {\n     *           setter.call(this, value);\n     *           // custom action.\n     *         },\n     *         configurable: true,\n     *         enumerable: true\n     *       }\n     *     }\n     *   }\n     *\n     * @nocollapse\n     */\n    static getPropertyDescriptor(name, key, _options) {\n        return {\n            // tslint:disable-next-line:no-any no symbol in index\n            get() {\n                return this[key];\n            },\n            set(value) {\n                const oldValue = this[name];\n                this[key] = value;\n                this._requestUpdate(name, oldValue);\n            },\n            configurable: true,\n            enumerable: true\n        };\n    }\n    /**\n     * Returns the property options associated with the given property.\n     * These options are defined with a PropertyDeclaration via the `properties`\n     * object or the `@property` decorator and are registered in\n     * `createProperty(...)`.\n     *\n     * Note, this method should be considered \"final\" and not overridden. To\n     * customize the options for a given property, override `createProperty`.\n     *\n     * @nocollapse\n     * @final\n     */\n    static getPropertyOptions(name) {\n        return this._classProperties && this._classProperties.get(name) ||\n            defaultPropertyDeclaration;\n    }\n    /**\n     * Creates property accessors for registered properties and ensures\n     * any superclasses are also finalized.\n     * @nocollapse\n     */\n    static finalize() {\n        // finalize any superclasses\n        const superCtor = Object.getPrototypeOf(this);\n        if (!superCtor.hasOwnProperty(finalized)) {\n            superCtor.finalize();\n        }\n        this[finalized] = true;\n        this._ensureClassProperties();\n        // initialize Map populated in observedAttributes\n        this._attributeToPropertyMap = new Map();\n        // make any properties\n        // Note, only process \"own\" properties since this element will inherit\n        // any properties defined on the superClass, and finalization ensures\n        // the entire prototype chain is finalized.\n        if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n            const props = this.properties;\n            // support symbols in properties (IE11 does not support this)\n            const propKeys = [\n                ...Object.getOwnPropertyNames(props),\n                ...(typeof Object.getOwnPropertySymbols === 'function') ?\n                    Object.getOwnPropertySymbols(props) :\n                    []\n            ];\n            // This for/of is ok because propKeys is an array\n            for (const p of propKeys) {\n                // note, use of `any` is due to TypeSript lack of support for symbol in\n                // index types\n                // tslint:disable-next-line:no-any no symbol in index\n                this.createProperty(p, props[p]);\n            }\n        }\n    }\n    /**\n     * Returns the property name for the given attribute `name`.\n     * @nocollapse\n     */\n    static _attributeNameForProperty(name, options) {\n        const attribute = options.attribute;\n        return attribute === false ?\n            undefined :\n            (typeof attribute === 'string' ?\n                attribute :\n                (typeof name === 'string' ? name.toLowerCase() : undefined));\n    }\n    /**\n     * Returns true if a property should request an update.\n     * Called when a property value is set and uses the `hasChanged`\n     * option for the property if present or a strict identity check.\n     * @nocollapse\n     */\n    static _valueHasChanged(value, old, hasChanged = notEqual) {\n        return hasChanged(value, old);\n    }\n    /**\n     * Returns the property value for the given attribute value.\n     * Called via the `attributeChangedCallback` and uses the property's\n     * `converter` or `converter.fromAttribute` property option.\n     * @nocollapse\n     */\n    static _propertyValueFromAttribute(value, options) {\n        const type = options.type;\n        const converter = options.converter || defaultConverter;\n        const fromAttribute = (typeof converter === 'function' ? converter : converter.fromAttribute);\n        return fromAttribute ? fromAttribute(value, type) : value;\n    }\n    /**\n     * Returns the attribute value for the given property value. If this\n     * returns undefined, the property will *not* be reflected to an attribute.\n     * If this returns null, the attribute will be removed, otherwise the\n     * attribute will be set to the value.\n     * This uses the property's `reflect` and `type.toAttribute` property options.\n     * @nocollapse\n     */\n    static _propertyValueToAttribute(value, options) {\n        if (options.reflect === undefined) {\n            return;\n        }\n        const type = options.type;\n        const converter = options.converter;\n        const toAttribute = converter && converter.toAttribute ||\n            defaultConverter.toAttribute;\n        return toAttribute(value, type);\n    }\n    /**\n     * Performs element initialization. By default captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        this._saveInstanceProperties();\n        // ensures first update will be caught by an early access of\n        // `updateComplete`\n        this._requestUpdate();\n    }\n    /**\n     * Fixes any properties set on the instance before upgrade time.\n     * Otherwise these would shadow the accessor and break these properties.\n     * The properties are stored in a Map which is played back after the\n     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n     * (<=41), properties created for native platform properties like (`id` or\n     * `name`) may not have default values set in the element constructor. On\n     * these browsers native properties appear on instances and therefore their\n     * default value will overwrite any element default (e.g. if the element sets\n     * this.id = 'id' in the constructor, the 'id' will become '' since this is\n     * the native platform default).\n     */\n    _saveInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this.constructor\n            ._classProperties.forEach((_v, p) => {\n            if (this.hasOwnProperty(p)) {\n                const value = this[p];\n                delete this[p];\n                if (!this._instanceProperties) {\n                    this._instanceProperties = new Map();\n                }\n                this._instanceProperties.set(p, value);\n            }\n        });\n    }\n    /**\n     * Applies previously saved instance properties.\n     */\n    _applyInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        // tslint:disable-next-line:no-any\n        this._instanceProperties.forEach((v, p) => this[p] = v);\n        this._instanceProperties = undefined;\n    }\n    connectedCallback() {\n        // Ensure first connection completes an update. Updates cannot complete\n        // before connection.\n        this.enableUpdating();\n    }\n    enableUpdating() {\n        if (this._enableUpdatingResolver !== undefined) {\n            this._enableUpdatingResolver();\n            this._enableUpdatingResolver = undefined;\n        }\n    }\n    /**\n     * Allows for `super.disconnectedCallback()` in extensions while\n     * reserving the possibility of making non-breaking feature additions\n     * when disconnecting at some point in the future.\n     */\n    disconnectedCallback() {\n    }\n    /**\n     * Synchronizes property values when attributes change.\n     */\n    attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n            this._attributeToProperty(name, value);\n        }\n    }\n    _propertyToAttribute(name, value, options = defaultPropertyDeclaration) {\n        const ctor = this.constructor;\n        const attr = ctor._attributeNameForProperty(name, options);\n        if (attr !== undefined) {\n            const attrValue = ctor._propertyValueToAttribute(value, options);\n            // an undefined value does not change the attribute.\n            if (attrValue === undefined) {\n                return;\n            }\n            // Track if the property is being reflected to avoid\n            // setting the property again via `attributeChangedCallback`. Note:\n            // 1. this takes advantage of the fact that the callback is synchronous.\n            // 2. will behave incorrectly if multiple attributes are in the reaction\n            // stack at time of calling. However, since we process attributes\n            // in `update` this should not be possible (or an extreme corner case\n            // that we'd like to discover).\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;\n            if (attrValue == null) {\n                this.removeAttribute(attr);\n            }\n            else {\n                this.setAttribute(attr, attrValue);\n            }\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;\n        }\n    }\n    _attributeToProperty(name, value) {\n        // Use tracking info to avoid deserializing attribute value if it was\n        // just set from a property setter.\n        if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {\n            return;\n        }\n        const ctor = this.constructor;\n        // Note, hint this as an `AttributeMap` so closure clearly understands\n        // the type; it has issues with tracking types through statics\n        // tslint:disable-next-line:no-unnecessary-type-assertion\n        const propName = ctor._attributeToPropertyMap.get(name);\n        if (propName !== undefined) {\n            const options = ctor.getPropertyOptions(propName);\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;\n            this[propName] =\n                // tslint:disable-next-line:no-any\n                ctor._propertyValueFromAttribute(value, options);\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;\n        }\n    }\n    /**\n     * This private version of `requestUpdate` does not access or return the\n     * `updateComplete` promise. This promise can be overridden and is therefore\n     * not free to access.\n     */\n    _requestUpdate(name, oldValue) {\n        let shouldRequestUpdate = true;\n        // If we have a property key, perform property update steps.\n        if (name !== undefined) {\n            const ctor = this.constructor;\n            const options = ctor.getPropertyOptions(name);\n            if (ctor._valueHasChanged(this[name], oldValue, options.hasChanged)) {\n                if (!this._changedProperties.has(name)) {\n                    this._changedProperties.set(name, oldValue);\n                }\n                // Add to reflecting properties set.\n                // Note, it's important that every change has a chance to add the\n                // property to `_reflectingProperties`. This ensures setting\n                // attribute + property reflects correctly.\n                if (options.reflect === true &&\n                    !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {\n                    if (this._reflectingProperties === undefined) {\n                        this._reflectingProperties = new Map();\n                    }\n                    this._reflectingProperties.set(name, options);\n                }\n            }\n            else {\n                // Abort the request if the property should not be considered changed.\n                shouldRequestUpdate = false;\n            }\n        }\n        if (!this._hasRequestedUpdate && shouldRequestUpdate) {\n            this._updatePromise = this._enqueueUpdate();\n        }\n    }\n    /**\n     * Requests an update which is processed asynchronously. This should\n     * be called when an element should update based on some state not triggered\n     * by setting a property. In this case, pass no arguments. It should also be\n     * called when manually implementing a property setter. In this case, pass the\n     * property `name` and `oldValue` to ensure that any configured property\n     * options are honored. Returns the `updateComplete` Promise which is resolved\n     * when the update completes.\n     *\n     * @param name {PropertyKey} (optional) name of requesting property\n     * @param oldValue {any} (optional) old value of requesting property\n     * @returns {Promise} A Promise that is resolved when the update completes.\n     */\n    requestUpdate(name, oldValue) {\n        this._requestUpdate(name, oldValue);\n        return this.updateComplete;\n    }\n    /**\n     * Sets up the element to asynchronously update.\n     */\n    async _enqueueUpdate() {\n        this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n        try {\n            // Ensure any previous update has resolved before updating.\n            // This `await` also ensures that property changes are batched.\n            await this._updatePromise;\n        }\n        catch (e) {\n            // Ignore any previous errors. We only care that the previous cycle is\n            // done. Any error should have been handled in the previous update.\n        }\n        const result = this.performUpdate();\n        // If `performUpdate` returns a Promise, we await it. This is done to\n        // enable coordinating updates with a scheduler. Note, the result is\n        // checked to avoid delaying an additional microtask unless we need to.\n        if (result != null) {\n            await result;\n        }\n        return !this._hasRequestedUpdate;\n    }\n    get _hasRequestedUpdate() {\n        return (this._updateState & STATE_UPDATE_REQUESTED);\n    }\n    get hasUpdated() {\n        return (this._updateState & STATE_HAS_UPDATED);\n    }\n    /**\n     * Performs an element update. Note, if an exception is thrown during the\n     * update, `firstUpdated` and `updated` will not be called.\n     *\n     * You can override this method to change the timing of updates. If this\n     * method is overridden, `super.performUpdate()` must be called.\n     *\n     * For instance, to schedule updates to occur just before the next frame:\n     *\n     * ```\n     * protected async performUpdate(): Promise<unknown> {\n     *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n     *   super.performUpdate();\n     * }\n     * ```\n     */\n    performUpdate() {\n        // Mixin instance properties once, if they exist.\n        if (this._instanceProperties) {\n            this._applyInstanceProperties();\n        }\n        let shouldUpdate = false;\n        const changedProperties = this._changedProperties;\n        try {\n            shouldUpdate = this.shouldUpdate(changedProperties);\n            if (shouldUpdate) {\n                this.update(changedProperties);\n            }\n            else {\n                this._markUpdated();\n            }\n        }\n        catch (e) {\n            // Prevent `firstUpdated` and `updated` from running when there's an\n            // update exception.\n            shouldUpdate = false;\n            // Ensure element can accept additional updates after an exception.\n            this._markUpdated();\n            throw e;\n        }\n        if (shouldUpdate) {\n            if (!(this._updateState & STATE_HAS_UPDATED)) {\n                this._updateState = this._updateState | STATE_HAS_UPDATED;\n                this.firstUpdated(changedProperties);\n            }\n            this.updated(changedProperties);\n        }\n    }\n    _markUpdated() {\n        this._changedProperties = new Map();\n        this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n    }\n    /**\n     * Returns a Promise that resolves when the element has completed updating.\n     * The Promise value is a boolean that is `true` if the element completed the\n     * update without triggering another update. The Promise result is `false` if\n     * a property was set inside `updated()`. If the Promise is rejected, an\n     * exception was thrown during the update.\n     *\n     * To await additional asynchronous work, override the `_getUpdateComplete`\n     * method. For example, it is sometimes useful to await a rendered element\n     * before fulfilling this Promise. To do this, first await\n     * `super._getUpdateComplete()`, then any subsequent state.\n     *\n     * @returns {Promise} The Promise returns a boolean that indicates if the\n     * update resolved without triggering another update.\n     */\n    get updateComplete() {\n        return this._getUpdateComplete();\n    }\n    /**\n     * Override point for the `updateComplete` promise.\n     *\n     * It is not safe to override the `updateComplete` getter directly due to a\n     * limitation in TypeScript which means it is not possible to call a\n     * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\n     * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\n     * This method should be overridden instead. For example:\n     *\n     *   class MyElement extends LitElement {\n     *     async _getUpdateComplete() {\n     *       await super._getUpdateComplete();\n     *       await this._myChild.updateComplete;\n     *     }\n     *   }\n     */\n    _getUpdateComplete() {\n        return this._updatePromise;\n    }\n    /**\n     * Controls whether or not `update` should be called when the element requests\n     * an update. By default, this method always returns `true`, but this can be\n     * customized to control when to update.\n     *\n     * @param _changedProperties Map of changed properties with old values\n     */\n    shouldUpdate(_changedProperties) {\n        return true;\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes.\n     * It can be overridden to render and keep updated element DOM.\n     * Setting properties inside this method will *not* trigger\n     * another update.\n     *\n     * @param _changedProperties Map of changed properties with old values\n     */\n    update(_changedProperties) {\n        if (this._reflectingProperties !== undefined &&\n            this._reflectingProperties.size > 0) {\n            // Use forEach so this works even if for/of loops are compiled to for\n            // loops expecting arrays\n            this._reflectingProperties.forEach((v, k) => this._propertyToAttribute(k, this[k], v));\n            this._reflectingProperties = undefined;\n        }\n        this._markUpdated();\n    }\n    /**\n     * Invoked whenever the element is updated. Implement to perform\n     * post-updating tasks via DOM APIs, for example, focusing an element.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * @param _changedProperties Map of changed properties with old values\n     */\n    updated(_changedProperties) {\n    }\n    /**\n     * Invoked when the element is first updated. Implement to perform one time\n     * work on the element after update.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * @param _changedProperties Map of changed properties with old values\n     */\n    firstUpdated(_changedProperties) {\n    }\n}\n_a = finalized;\n/**\n * Marks class as having finished creating properties.\n */\nUpdatingElement[_a] = true;\n//# sourceMappingURL=updating-element.js.map","/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nexport const supportsAdoptingStyleSheets = ('adoptedStyleSheets' in Document.prototype) &&\n    ('replace' in CSSStyleSheet.prototype);\nconst constructionToken = Symbol();\nexport class CSSResult {\n    constructor(cssText, safeToken) {\n        if (safeToken !== constructionToken) {\n            throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n        }\n        this.cssText = cssText;\n    }\n    // Note, this is a getter so that it's lazy. In practice, this means\n    // stylesheets are not created until the first element instance is made.\n    get styleSheet() {\n        if (this._styleSheet === undefined) {\n            // Note, if `adoptedStyleSheets` is supported then we assume CSSStyleSheet\n            // is constructable.\n            if (supportsAdoptingStyleSheets) {\n                this._styleSheet = new CSSStyleSheet();\n                this._styleSheet.replaceSync(this.cssText);\n            }\n            else {\n                this._styleSheet = null;\n            }\n        }\n        return this._styleSheet;\n    }\n    toString() {\n        return this.cssText;\n    }\n}\n/**\n * Wrap a value for interpolation in a css tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value) => {\n    return new CSSResult(String(value), constructionToken);\n};\nconst textFromCSSResult = (value) => {\n    if (value instanceof CSSResult) {\n        return value.cssText;\n    }\n    else if (typeof value === 'number') {\n        return value;\n    }\n    else {\n        throw new Error(`Value passed to 'css' function must be a 'css' function result: ${value}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`);\n    }\n};\n/**\n * Template tag which which can be used with LitElement's `style` property to\n * set element styles. For security reasons, only literal string values may be\n * used. To incorporate non-literal values `unsafeCSS` may be used inside a\n * template string part.\n */\nexport const css = (strings, ...values) => {\n    const cssText = values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);\n    return new CSSResult(cssText, constructionToken);\n};\n//# sourceMappingURL=css-tag.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { render } from 'lit-html/lib/shady-render.js';\nimport { UpdatingElement } from './lib/updating-element.js';\nexport * from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport { html, svg, TemplateResult, SVGTemplateResult } from 'lit-html/lit-html.js';\nimport { supportsAdoptingStyleSheets } from './lib/css-tag.js';\nexport * from './lib/css-tag.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litElementVersions'] || (window['litElementVersions'] = []))\n    .push('2.3.1');\n/**\n * Sentinal value used to avoid calling lit-html's render function when\n * subclasses do not implement `render`\n */\nconst renderNotImplemented = {};\nexport class LitElement extends UpdatingElement {\n    /**\n     * Return the array of styles to apply to the element.\n     * Override this method to integrate into a style management system.\n     *\n     * @nocollapse\n     */\n    static getStyles() {\n        return this.styles;\n    }\n    /** @nocollapse */\n    static _getUniqueStyles() {\n        // Only gather styles once per class\n        if (this.hasOwnProperty(JSCompiler_renameProperty('_styles', this))) {\n            return;\n        }\n        // Take care not to call `this.getStyles()` multiple times since this\n        // generates new CSSResults each time.\n        // TODO(sorvell): Since we do not cache CSSResults by input, any\n        // shared styles will generate new stylesheet objects, which is wasteful.\n        // This should be addressed when a browser ships constructable\n        // stylesheets.\n        const userStyles = this.getStyles();\n        if (userStyles === undefined) {\n            this._styles = [];\n        }\n        else if (Array.isArray(userStyles)) {\n            // De-duplicate styles preserving the _last_ instance in the set.\n            // This is a performance optimization to avoid duplicated styles that can\n            // occur especially when composing via subclassing.\n            // The last item is kept to try to preserve the cascade order with the\n            // assumption that it's most important that last added styles override\n            // previous styles.\n            const addStyles = (styles, set) => styles.reduceRight((set, s) => \n            // Note: On IE set.add() does not return the set\n            Array.isArray(s) ? addStyles(s, set) : (set.add(s), set), set);\n            // Array.from does not work on Set in IE, otherwise return\n            // Array.from(addStyles(userStyles, new Set<CSSResult>())).reverse()\n            const set = addStyles(userStyles, new Set());\n            const styles = [];\n            set.forEach((v) => styles.unshift(v));\n            this._styles = styles;\n        }\n        else {\n            this._styles = [userStyles];\n        }\n    }\n    /**\n     * Performs element initialization. By default this calls `createRenderRoot`\n     * to create the element `renderRoot` node and captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        super.initialize();\n        this.constructor._getUniqueStyles();\n        this.renderRoot =\n            this.createRenderRoot();\n        // Note, if renderRoot is not a shadowRoot, styles would/could apply to the\n        // element's getRootNode(). While this could be done, we're choosing not to\n        // support this now since it would require different logic around de-duping.\n        if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {\n            this.adoptStyles();\n        }\n    }\n    /**\n     * Returns the node into which the element should render and by default\n     * creates and returns an open shadowRoot. Implement to customize where the\n     * element's DOM is rendered. For example, to render into the element's\n     * childNodes, return `this`.\n     * @returns {Element|DocumentFragment} Returns a node into which to render.\n     */\n    createRenderRoot() {\n        return this.attachShadow({ mode: 'open' });\n    }\n    /**\n     * Applies styling to the element shadowRoot using the `static get styles`\n     * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where\n     * available and will fallback otherwise. When Shadow DOM is polyfilled,\n     * ShadyCSS scopes styles and adds them to the document. When Shadow DOM\n     * is available but `adoptedStyleSheets` is not, styles are appended to the\n     * end of the `shadowRoot` to [mimic spec\n     * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n     */\n    adoptStyles() {\n        const styles = this.constructor._styles;\n        if (styles.length === 0) {\n            return;\n        }\n        // There are three separate cases here based on Shadow DOM support.\n        // (1) shadowRoot polyfilled: use ShadyCSS\n        // (2) shadowRoot.adoptedStyleSheets available: use it.\n        // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after\n        // rendering\n        if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {\n            window.ShadyCSS.ScopingShim.prepareAdoptedCssText(styles.map((s) => s.cssText), this.localName);\n        }\n        else if (supportsAdoptingStyleSheets) {\n            this.renderRoot.adoptedStyleSheets =\n                styles.map((s) => s.styleSheet);\n        }\n        else {\n            // This must be done after rendering so the actual style insertion is done\n            // in `update`.\n            this._needsShimAdoptedStyleSheets = true;\n        }\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        // Note, first update/render handles styleElement so we only call this if\n        // connected after first update.\n        if (this.hasUpdated && window.ShadyCSS !== undefined) {\n            window.ShadyCSS.styleElement(this);\n        }\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes\n     * and calls `render` to render DOM via lit-html. Setting properties inside\n     * this method will *not* trigger another update.\n     * @param _changedProperties Map of changed properties with old values\n     */\n    update(changedProperties) {\n        // Setting properties in `render` should not trigger an update. Since\n        // updates are allowed after super.update, it's important to call `render`\n        // before that.\n        const templateResult = this.render();\n        super.update(changedProperties);\n        // If render is not implemented by the component, don't call lit-html render\n        if (templateResult !== renderNotImplemented) {\n            this.constructor\n                .render(templateResult, this.renderRoot, { scopeName: this.localName, eventContext: this });\n        }\n        // When native Shadow DOM is used but adoptedStyles are not supported,\n        // insert styling after rendering to ensure adoptedStyles have highest\n        // priority.\n        if (this._needsShimAdoptedStyleSheets) {\n            this._needsShimAdoptedStyleSheets = false;\n            this.constructor._styles.forEach((s) => {\n                const style = document.createElement('style');\n                style.textContent = s.cssText;\n                this.renderRoot.appendChild(style);\n            });\n        }\n    }\n    /**\n     * Invoked on each update to perform rendering tasks. This method may return\n     * any value renderable by lit-html's NodePart - typically a TemplateResult.\n     * Setting properties inside this method will *not* trigger the element to\n     * update.\n     */\n    render() {\n        return renderNotImplemented;\n    }\n}\n/**\n * Ensure this class is marked as `finalized` as an optimization ensuring\n * it will not needlessly try to `finalize`.\n *\n * Note this property name is a string to prevent breaking Closure JS Compiler\n * optimizations. See updating-element.ts for more information.\n */\nLitElement['finalized'] = true;\n/**\n * Render method used to render the value to the element's DOM.\n * @param result The value to render.\n * @param container Node into which to render.\n * @param options Element name.\n * @nocollapse\n */\nLitElement.render = render;\n//# sourceMappingURL=lit-element.js.map","// @ts-check\n\nlet accelerometer = undefined;\nexport const buf = new Float64Array(256);\nexport const buf2 = new Float64Array(256);\nexport const evtbuf = new Float64Array(256);\n\nexport const Fusion = new class extends EventTarget {\n\n    constructor() {\n        super();\n        console.log('Init');\n        accelerometer = new Accelerometer({frequency: 60});\n\n        this.initialize();\n\n        this.velocity = 0;\n\n        this.evts = [];\n    }\n\n    pushEvt(evt) {\n        evt._velocity = this.velocity;\n        this.evts.push(evt);\n    }\n\n    initialize() {\n        let oldZ;\n\n        accelerometer.addEventListener('reading', () => {\n            if (oldZ !== undefined) {\n\n                buf.copyWithin(1, 0, 255);\n                buf[0] = accelerometer.z - oldZ;\n\n                this.velocity *= 0.3;\n                this.velocity = Math.max(Math.abs(buf[0]), this.velocity);\n\n                buf2.copyWithin(1, 0, 255);\n                buf2[0] = this.velocity;\n\n                evtbuf.copyWithin(1, 0, 255);\n                evtbuf[0] = this.evts.length * this.velocity;\n\n                this.dispatchEvent(new CustomEvent('sample'));\n\n                this.evts.forEach(evt => {\n                    // Insert velocity and forward...\n                    evt._velocity = Math.max(evt._velocity, this.velocity);\n                    this.dispatchEvent(new CustomEvent('replay-event', {detail: evt}));\n                });\n                this.evts = [];\n            }\n            oldZ = accelerometer.z;\n        });\n\n        accelerometer.start();\n    }\n}\n\n\n","// @ts-check\n\nexport const AudioServer = new class extends EventTarget {\n\n    constructor() {\n        super();\n\n        this.effects = new Map();\n        this.ctx = new AudioContext();\n    }\n\n    checkInitAudio() {\n        if (!this._initialized) {\n            this.ctx.resume();\n        }\n        this._initialized = true;\n    }\n\n    async loadEffect(sample, name) {\n        const res = await fetch(sample);\n        const data = await res.arrayBuffer();\n        this.ctx.decodeAudioData(data , buffer => {\n            this.effects.set(name, buffer);\n        });\n    }\n\n    playEffect(name, volume) {\n        if (!this.effects.has(name)) return;\n\n        const source = this.ctx.createBufferSource();\n        source.buffer = this.effects.get(name);\n\n        const gainNode = this.ctx.createGain();\n\n        source.connect(gainNode);\n        gainNode.connect(this.ctx.destination);\n        gainNode.gain.value = volume;\n\n        source.start(0);\n    }\n}\n\n\n","// @ts-check\nimport {LitElement, css, html} from 'lit-element';\n\nimport {Fusion} from './fusion';\nimport { AudioServer } from './audio-server';\n\nexport class DrumPad extends LitElement {\n    constructor() {\n        super();\n\n        this.sample = \"N/A\";\n    }\n\n    static get properties() {\n        return {\n            sample: {type: String}\n        }\n    }\n\n    static get styles() {\n        return [css`\n            .drum {\n                border-radius: 50%;\n                background: black;\n                width: 100%;\n                height: 100%;\n                box-sizing: border-box;\n                border: 10px solid #800;\n                background-color: #d99449;\n            }\n        `\n        ]\n    }\n\n    render() {\n        return html`\n            <div class=\"drum\" @pointerdown=${this.pdown} @pointerup=${this.pup}></div>\n        `;\n    }\n\n    pdown(evt) {\n        AudioServer.checkInitAudio();\n        // console.log('pointerdown, vol =', Fusion.velocity);\n        Fusion.pushEvt({sample:this.sample});\n    }\n\n    pup() {\n        // console.log('pointerup');\n    }\n}\ncustomElements.define('drum-pad', DrumPad);","// @ts-check\nimport {LitElement, css, html} from 'lit-element';\n\nimport './drum-pad';\n\nimport {Fusion, buf as samplebuf, buf2 as envelope, evtbuf} from './fusion';\n\nimport {AudioServer} from './audio-server';\n\nexport class MainApp extends LitElement {\n    static get styles() {\n        return [css`\n            :host {\n                user-select: none;\n            }\n\n            drum-pad {\n                position: fixed;\n            }\n\n            #pad1 {\n                right: 140px;\n                bottom: 10px;\n                width: 130px;\n                height: 130px;\n            }\n\n            #pad2 {\n                right: 250px;\n                bottom: 120px;\n                width: 145px;\n                height: 145px;\n            }\n\n            #pad3 {\n                right: 10px;\n                bottom: 120px;\n                width: 160px;\n                height: 160px;\n            }\n            `\n        ];\n    }\n\n    constructor() {\n        super();\n\n        this.paintGraph = this.paintGraph.bind(this);\n    }\n\n    render() {\n        return html`<h1>Sensor Fusion Experiment</h1>\n            <h3>Accelerometer + touch</h3>\n            <drum-pad id=\"pad1\" sample=\"drum1\"></drum-pad>\n            <drum-pad id=\"pad2\" sample=\"drum2\"></drum-pad>\n            <drum-pad id=\"pad3\" sample=\"drum3\"></drum-pad>\n            <canvas width=256 height=200></canvas>\n        `;\n    }\n\n    firstUpdated() {\n        this.graph = this.shadowRoot.querySelector('canvas');\n\n        this.ctx = this.graph.getContext(\"2d\");\n\n        Fusion.addEventListener('sample', () => requestAnimationFrame(this.paintGraph));\n\n        Fusion.addEventListener('replay-event', e => {\n            console.log('ReplyEvent', e.detail);\n            AudioServer.playEffect(e.detail.sample, Math.log(1 + e.detail._velocity)*0.5);\n        });\n\n        AudioServer.loadEffect('./assets/audio/xconga_1.ogg','drum1');\n        AudioServer.loadEffect('./assets/audio/xconga_2.ogg','drum2');\n        AudioServer.loadEffect('./assets/audio/xconga_3.ogg','drum3');\n    }\n\n    plotBuf(buf, color) {\n        this.ctx.strokeStyle = color;\n        this.ctx.beginPath();\n        let y = 100 - 5 * buf[0];\n        this.ctx.moveTo(255,y);\n        let x = 254;\n        let i = 1\n        while(x >= 0 && i < buf.length) {\n            y = 100 - 5 * buf[i];\n            this.ctx.lineTo(x,y);\n            x--;\n            i++;\n        }\n        this.ctx.stroke();\n    }\n\n    paintGraph() {\n        this.ctx.clearRect(0,0,256,200);\n        this.plotBuf(samplebuf, 'blue');\n        this.plotBuf(envelope, 'green');\n        this.plotBuf(evtbuf, 'red');\n    }\n}\ncustomElements.define('main-app', MainApp);"],"names":["isCEPolyfill","window","customElements","undefined","polyfillWrapFlushCallback","removeNodes","container","start","end","n","nextSibling","removeChild","marker","String","Math","random","slice","nodeMarker","markerRegex","RegExp","Template","[object Object]","result","element","this","parts","nodesToRemove","stack","walker","document","createTreeWalker","content","lastPartIndex","index","partIndex","strings","values","length","node","nextNode","nodeType","hasAttributes","attributes","count","i","endsWith","name","stringForPart","lastAttributeNameRegex","exec","attributeLookupName","toLowerCase","attributeValue","getAttribute","removeAttribute","statics","split","push","type","tagName","currentNode","data","indexOf","parent","parentNode","lastIndex","insert","s","createMarker","match","createTextNode","insertBefore","previousSibling","pop","str","suffix","isTemplatePartActive","part","createComment","removeNodesFromTemplate","template","nextActiveIndexInTemplateParts","nodeIndex","removeCount","nodesToRemoveInTemplate","currentRemovingNode","has","forEach","countNodes","startIndex","directives","WeakMap","isDirective","o","noChange","nothing","TemplateInstance","processor","options","__parts","setValue","commit","fragment","cloneNode","importNode","nodeName","handleTextExpression","insertAfterNode","handleAttributeExpressions","adoptNode","upgrade","commentMarker","TemplateResult","l","html","isCommentBinding","commentOpen","lastIndexOf","attributeMatch","substr","createElement","innerHTML","getHTML","isPrimitive","value","isIterable","Array","isArray","Symbol","iterator","AttributeCommitter","dirty","_createPart","AttributePart","text","v","t","setAttribute","_getValue","committer","directive","NodePart","__pendingValue","startNode","appendChild","endNode","ref","__insert","__commitText","__commitTemplateResult","Node","__commitNode","__commitIterable","clear","valueAsString","templateFactory","update","instance","_clone","itemParts","itemPart","item","appendIntoPart","insertAfterPart","BooleanAttributePart","Error","PropertyCommitter","super","single","PropertyPart","eventOptionsSupported","capture","addEventListener","removeEventListener","_e","EventPart","eventName","eventContext","__boundHandleEvent","e","handleEvent","newListener","oldListener","shouldRemoveListener","once","passive","shouldAddListener","__options","getOptions","event","call","templateCache","templateCaches","get","stringsArray","keyString","Map","set","key","join","getTemplateElement","defaultTemplateProcessor","prefix","getTemplateCacheKey","scopeName","compatibleShadyCSSVersion","ShadyCSS","prepareTemplateDom","console","warn","shadyTemplateFactory","cacheKey","TEMPLATE_TYPES","shadyRenderSet","Set","prepareTemplateStyles","renderedDOM","add","templateElement","styles","querySelectorAll","condensedStyle","style","textContent","templates","from","removeStylesFromLitTemplates","refNode","insertCount","walkerIndex","insertNodeIntoTemplate","firstChild","querySelector","nativeShadow","removes","JSCompiler_renameProperty","prop","_obj","defaultConverter","Boolean","Object","JSON","stringify","Number","parse","notEqual","old","defaultPropertyDeclaration","attribute","converter","reflect","hasChanged","UpdatingElement","HTMLElement","_updateState","_instanceProperties","_updatePromise","Promise","res","_enableUpdatingResolver","_changedProperties","_reflectingProperties","initialize","observedAttributes","finalize","_classProperties","p","attr","_attributeNameForProperty","_attributeToPropertyMap","hasOwnProperty","superProperties","getPrototypeOf","k","_ensureClassProperties","noAccessor","prototype","descriptor","getPropertyDescriptor","defineProperty","_options","oldValue","_requestUpdate","configurable","enumerable","superCtor","props","properties","propKeys","getOwnPropertyNames","getOwnPropertySymbols","createProperty","fromAttribute","toAttribute","_saveInstanceProperties","constructor","_v","enableUpdating","_attributeToProperty","ctor","attrValue","_propertyValueToAttribute","propName","getPropertyOptions","_propertyValueFromAttribute","shouldRequestUpdate","_valueHasChanged","_hasRequestedUpdate","_enqueueUpdate","updateComplete","performUpdate","hasUpdated","_applyInstanceProperties","shouldUpdate","changedProperties","_markUpdated","firstUpdated","updated","_getUpdateComplete","size","_propertyToAttribute","supportsAdoptingStyleSheets","Document","CSSStyleSheet","constructionToken","CSSResult","cssText","safeToken","styleSheet","_styleSheet","replaceSync","css","reduce","acc","idx","textFromCSSResult","renderNotImplemented","LitElement","userStyles","getStyles","_styles","addStyles","reduceRight","unshift","_getUniqueStyles","renderRoot","createRenderRoot","ShadowRoot","adoptStyles","attachShadow","mode","adoptedStyleSheets","map","_needsShimAdoptedStyleSheets","ScopingShim","prepareAdoptedCssText","localName","connectedCallback","styleElement","templateResult","render","hasRendered","needsScoping","host","firstScopeRender","renderContainer","createDocumentFragment","assign","appendInto","litRender","delete","accelerometer","buf","Float64Array","buf2","evtbuf","Fusion","EventTarget","log","Accelerometer","frequency","velocity","evts","pushEvt","evt","_velocity","oldZ","copyWithin","z","max","abs","dispatchEvent","CustomEvent","detail","AudioServer","effects","ctx","AudioContext","checkInitAudio","_initialized","resume","sample","fetch","arrayBuffer","decodeAudioData","buffer","playEffect","volume","source","createBufferSource","gainNode","createGain","connect","destination","gain","define","pdown","pup","paintGraph","bind","graph","shadowRoot","getContext","requestAnimationFrame","loadEffect","plotBuf","color","strokeStyle","beginPath","y","moveTo","x","lineTo","stroke","clearRect","samplebuf","envelope"],"mappings":"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"}